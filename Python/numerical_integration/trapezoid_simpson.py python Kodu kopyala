import numpy as np

# Function for Trapezoidal Rule
def trapezoidal_rule(func, a, b, n):
    """
    Numerically integrate using the Trapezoidal Rule.
    :param func: Function to integrate.
    :param a: Lower limit of integration.
    :param b: Upper limit of integration.
    :param n: Number of intervals.
    :return: Approximate integral value.
    """
    h = (b - a) / n
    x = np.linspace(a, b, n + 1)
    y = func(x)
    integral = h * (np.sum(y) - (y[0] + y[-1]) / 2)
    return integral

# Function for Simpson's Rule
def simpsons_rule(func, a, b, n):
    """
    Numerically integrate using Simpson's Rule.
    :param func: Function to integrate.
    :param a: Lower limit of integration.
    :param b: Upper limit of integration.
    :param n: Number of intervals (must be even).
    :return: Approximate integral value.
    """
    if n % 2 != 0:
        raise ValueError("Number of intervals (n) must be even for Simpson's Rule.")
    h = (b - a) / n
    x = np.linspace(a, b, n + 1)
    y = func(x)
    integral = h / 3 * (y[0] + y[-1] + 4 * np.sum(y[1:n:2]) + 2 * np.sum(y[2:n-1:2]))
    return integral

# Example usage
if __name__ == "__main__":
    f = lambda x: np.sin(x)  # Example function
    print("Trapezoidal Rule:", trapezoidal_rule(f, 0, np.pi, 100))
    print("Simpson's Rule:", simpsons_rule(f, 0, np.pi, 100))
